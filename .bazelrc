build --cxxopt='-std=c++23'

# # Remote caching and related setup
# build --bes_results_url=https://app.buildbuddy.io/invocation/
# build --bes_backend=grpcs://remote.buildbuddy.io
# build --remote_cache_compression
# build --experimental_remote_cache_compression_threshold=100
# build --jobs=50
# build --remote_cache=grpcs://remote.buildbuddy.io
# build --remote_download_all # Helps remove network bottleneck if caching is enabled
# build --remote_timeout=10m
# build --noslim_profile
# build --experimental_profile_include_target_label
# build --experimental_profile_include_primary_output

# # Remote execution; several issues with it, so make it a config
# build:remote --remote_executor=grpcs://remote.buildbuddy.io
# # https://www.buildbuddy.io/docs/rbe-platforms
# build:remote --host_platform=//bzl/platforms:rbe_platform

# Hermetiq BEP Configuration
build --bes_instance_name=339b6c81-f300-4e67-9b0c-f50c85fcceeb
build --bes_backend=grpcs://bep.cloud-grpc.hermetiq.io
build --bes_timeout=120s
build --bes_results_url=https://dashboard.hermetiq.io/build/
# Authentication
build --credential_helper="bep.cloud-grpc.hermetiq.io=hermetiq-credential-helper.sh"
build  --generate_json_trace_profile
build  --experimental_profile_include_primary_output
build  --experimental_profile_include_target_label
build --workspace_status_command=./tools/release/hermetiq-build-metadata.sh

# Using nightly channel for WASM stuffs
build --@rules_rust//rust/toolchain/channel=nightly

# Not needed to build targets (due to platform transitions) but occasionally handy
build:pico --platforms=//bzl/platforms:rp2040
build:pico_w --platforms=//bzl/platforms:rp2040_w

# https://github.com/bazel-contrib/bazel-lib/blob/f048405a6e19a930c70113dc57aae51d652cd3a6/docs/stamping.md
build:stamp --stamp --workspace_status_command=./tools/release/bazel_stamp_vars.sh

# https://github.com/bazelbuild/bazel/issues/4867#issuecomment-830402410
common:quiet --ui_event_filters=-info,-stdout,-stderr --noshow_progress

#
# Begin JS stuff
# Source: https://github.com/bazelbuild/examples/blob/b51e3bdd468ce8c4a516d7dca993909dcc84af32/frontend/.bazelrc
#

# passes an argument `--skipLibCheck` to *every* spawn of the TypeScript compiler, tsc
common --@aspect_rules_ts//ts:skipLibCheck=always

# Required for rules_js
build --enable_runfiles

# Allow the Bazel server to check directory sources for changes.
# Recommended when using copy_directory, see
# https://github.com/aspect-build/bazel-lib/blob/main/docs/copy_directory.md
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

###########################
# Linting
# TODO: lint.bzl doesn't exist in the example repo
# Enable with --config=lint
# This is demonstrated by the next.js example:
# cd blog; npm run lint
build:lint --aspects=//:lint.bzl%eslint
# Gather lint reports.
# Note: --remote_download_regex is for RBE and was added in Bazel 7.
build:lint --output_groups=rules_lint_report --remote_download_regex='.*aspect_rules_lint.report'
# Cause build failures when there are lint warnings.
# This is a simple configuration, but you probably want to report them as code review comments instead.
# See https://github.com/aspect-build/rules_lint/blob/main/docs/linting.md#usage
build:lint --aspects_parameters=fail_on_violation=true --keep_going

#
# End JS stuff
#

test --test_output=errors

# From https://github.com/google/copybara?tab=readme-ov-file#using-pre-built-copybara-in-bazel
run --java_runtime_version=remotejdk_21

run:pypi --run_under="TWINE_PASSWORD=$(cat $BUILD_WORKING_DIRECTORY/services/secrets/pypi.token)"
run:testpypi --run_under="TWINE_PASSWORD=$(cat $BUILD_WORKING_DIRECTORY/services/secrets/pypi_test.token)"

try-import %workspace%/.user.bazelrc
