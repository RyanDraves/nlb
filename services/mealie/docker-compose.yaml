# Add the `services` prefix so we don't have to deal with
# moving the prod data around. I tried copying the data with
# `    docker run --rm -v source_volume:/from -v destination_volume:/to alpine sh -c "cp -av /from/* /to"`
# but the user auth didn't like that (different salt?).
name: services

services:
  mealie:
    image: ghcr.io/mealie-recipes/mealie:v2.8.0
    container_name: mealie
    restart: always
    network_mode: service:tailscale
    deploy:
      resources:
        limits:
          memory: 1000M
    volumes:
      - mealie-data:/app/data/
    environment:
      ALLOW_SIGNUP: false
      ALLOW_PASSWORD_LOGIN: false
      PUID: 1000
      PGID: 1000
      TZ: America/Denver
      BASE_URL: https://recipes.barn-arcturus.ts.net
      # Database Settings
      DB_ENGINE: postgres
      POSTGRES_USER: mealie
      POSTGRES_SERVER: mealie-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mealie
      SMTP_HOST: mail.smtp2go.com
      SMTP_PORT: 2525
      SMTP_USER: mealie2
      SMTP_FROM_EMAIL: mealie@ryandraves.com
      # https://integrations.goauthentik.io/integrations/services/mealie/
      OIDC_AUTH_ENABLED: true
      OIDC_PROVIDER_NAME: authentik
      OIDC_CONFIGURATION_URL: https://authentik.barn-arcturus.ts.net/application/o/mealie/.well-known/openid-configuration
      OIDC_CLIENT_ID: v4ZbXuorasB3YOCFaHIPft8TLetZ10enyki4dDOk
      OIDC_SIGNUP_ENABLED: true
      OIDC_USER_GROUP: Mealie Users
      OIDC_ADMIN_GROUP: Mealie Admins
      # The login page will be bypassed and you will be sent directly to your Identity Provider
      OIDC_AUTO_REDIRECT: true
      # By setting this value to true, a session will be extended as if "Remember Me" was checked.
      OIDC_REMEMBER_ME: true
    secrets:
      - postgres_password
      - smtp_password
      - oidc_secret
    entrypoint: [
      "/bin/sh",
      "-c",
      "set -e; export POSTGRES_PASSWORD=$(cat /run/secrets/postgres_password); export SMTP_PASSWORD=$(cat /run/secrets/smtp_password); export OIDC_CLIENT_SECRET=$(cat /run/secrets/oidc_secret); echo 'Secrets loaded successfully'; /app/run.sh"
    ]
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: mealie-postgres
    image: postgres:15
    restart: always
    volumes:
      - mealie-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER: mealie
      PGUSER: mealie
    secrets:
      - postgres_password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mealie

  tailscale:
    image: tailscale/tailscale
    container_name: mealie-tailscale
    hostname: recipes
    secrets:
      - tailnet_oauth
    environment:
      TS_EXTRA_ARGS: --advertise-tags=tag:container
      TS_STATE_DIR: /var/lib/tailscale
      TS_SERVE_CONFIG: /config/ts-serve.json
    volumes:
      - mealie-ts-authkey:/var/lib/tailscale
      # Use a directory so `fsnotify` can watch the config file for changes
      - ${PWD}/ts-serve:/config
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
    command: >
      /bin/sh -c "export TS_AUTHKEY=$$(cat /run/secrets/tailnet_oauth)?ephemeral=false && /usr/local/bin/containerboot"
    networks:
      - mealie

# Custom network; only needed if other compose files are in the parent
# `services` directory.
networks:
  mealie:
    driver: bridge

volumes:
  mealie-data:
  mealie-pgdata:
  mealie-ts-authkey:


secrets:
  tailnet_oauth:
    file: ${PWD}/../secrets/tailnet_oauth.secret
  postgres_password:
    file: ${PWD}/../secrets/mealie_postgres.password
  smtp_password:
    file: ${PWD}/../secrets/mealie_smtp.password
  oidc_secret:
    file: ${PWD}/../secrets/mealie_oidc.secret
