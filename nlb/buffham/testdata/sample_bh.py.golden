# @generated by Buffham
import dataclasses
import enum
import struct
from typing import Self, Type

from emb.network.serialize import bh_cobs
from emb.network.transport import transporter
from nlb.buffham import bh

from nlb.buffham.testdata import other_bh

# This is a constant in the global scope
MY_CONSTANT = 4
CONSTANT_STRING = "Hello, world!"  # constants can have inline comments
# Constants may reference other constants with {brackets}
COMPOSED_CONSTANT = 2 + MY_CONSTANT + other_bh.OTHER_CONSTANT


@dataclasses.dataclass
class Ping:
    """A message comment
    """

    # Add some comments here
    ping: int

    def serialize(self) -> bytes:
        buffer = bytes()
        buffer += struct.pack('<B', self.ping)
        return buffer

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]:
        ping = struct.unpack_from('<B', buffer, 0)[0]
        return cls(
            ping=ping,
        ), 1

@dataclasses.dataclass
class FlashPage:
    """
    A bunch of message comments,
    in a block-like pattern.

    All of these belong to `FlashPage`

    """

    address: int
    # Another field comment
    data: list[int]  # What about some in-line comments for fields?
    # This comment belongs to `read_size`
    read_size: int

    def serialize(self) -> bytes:
        buffer = bytes()
        buffer += struct.pack('<I', self.address)
        buffer += struct.pack('<H', len(self.data))
        buffer += struct.pack(f'<{len(self.data)}B', *self.data)
        buffer += struct.pack('<I', self.read_size)
        return buffer

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]:
        address = struct.unpack_from('<I', buffer, 0)[0]
        data_size = struct.unpack_from('<H', buffer, 4)[0]
        data = list(struct.unpack_from(f'<{data_size}B', buffer, 6))
        read_size = struct.unpack_from('<I', buffer, 6 + data_size * 1)[0]
        return cls(
            address=address,
            data=data,
            read_size=read_size,
        ), 10 + data_size * 1

@dataclasses.dataclass
class LogMessage:
    message: str

    def serialize(self) -> bytes:
        buffer = bytes()
        buffer += struct.pack('<H', len(self.message))
        buffer += self.message.encode()
        return buffer

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]:
        message_size = struct.unpack_from('<H', buffer, 0)[0]
        message = buffer[2:2 + message_size].decode()
        return cls(
            message=message,
        ), 2 + message_size * 1

@dataclasses.dataclass
class NestedMessage:
    flag: int
    message: LogMessage
    numbers: list[int]
    pong: Ping
    other_pong: other_bh.Pong

    def serialize(self) -> bytes:
        buffer = bytes()
        buffer += struct.pack('<B', self.flag)
        buffer += self.message.serialize()
        buffer += struct.pack('<H', len(self.numbers))
        buffer += struct.pack(f'<{len(self.numbers)}i', *self.numbers)
        buffer += self.pong.serialize()
        buffer += self.other_pong.serialize()
        return buffer

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]:
        flag = struct.unpack_from('<B', buffer, 0)[0]
        message, message_size = LogMessage.deserialize(buffer[1:])
        numbers_size = struct.unpack_from('<H', buffer, 1 + message_size)[0]
        numbers = list(struct.unpack_from(f'<{numbers_size}i', buffer, 3 + message_size))
        pong, pong_size = Ping.deserialize(buffer[3 + message_size + numbers_size * 4:])
        other_pong, other_pong_size = other_bh.Pong.deserialize(buffer[3 + message_size + numbers_size * 4 + pong_size:])
        return cls(
            flag=flag,
            message=message,
            numbers=numbers,
            pong=pong,
            other_pong=other_pong,
        ), 3 + message_size + numbers_size * 4 + pong_size + other_pong_size

REGISTRY: dict[int, Type[bh.BuffhamLike]] = {
    1: LogMessage,
    2: FlashPage,
    3: FlashPage,
    4: LogMessage,
}

class SampleSerializer(bh_cobs.BhCobs):
    def __init__(self, registry: bh_cobs.Registry | None = None):
        registry = (registry or {}) | REGISTRY | other_bh.REGISTRY
        super().__init__(registry)

class SampleNode[Transporter: transporter.TransporterLike](bh.BhNode[SampleSerializer, Transporter]):
    def __init__(self, serializer: SampleSerializer | None = None, transporter: Transporter | None = None):
        super().__init__(serializer or SampleSerializer(), transporter)

PING = bh.Transaction[other_bh.Pong, LogMessage](1)
# Transaction comment
FLASH_PAGE = bh.Transaction[FlashPage, FlashPage](2)
READ_FLASH_PAGE = bh.Transaction[FlashPage, FlashPage](3)

class PublishIds(enum.Enum):
    # Publish comment
    LOG_MESSAGE = 4
