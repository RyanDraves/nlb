# @generated by Buffham
import dataclasses
from typing import Self

from emb.network.serialize import bh_cobs
from emb.network.transport import transporter
from nlb.buffham import bh

PICO_FLASH_SIZE = 2 * 1024 * 1024
PICO_APP_SIZE = 880 * 1024
PICO_APP_ADDR_A = 160 * 1024
PICO_APP_ADDR_B = PICO_APP_ADDR_A + 880 * 1024
NUM_SECTORS = 32


@dataclasses.dataclass
class Ping:
    # Pong!
    ping: int

    def serialize(self) -> bytes: ...

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]: ...

@dataclasses.dataclass
class FlashPage:
    """A page from the app flash image
    """

    # Address to work with
    #
    # On writes, it's relative to the start of the opposite side's firmware address
    # On reads, it's relative to the start of flash
    address: int
    # Number of bytes to read. Be mindful of `kBufSize = 1536` in `bh_cobs.hpp`
    # and the stack size of the microcontroller (2kB for the Pico)
    read_size: int
    data: list[int]

    def serialize(self) -> bytes: ...

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]: ...

@dataclasses.dataclass
class FlashSector:
    """A scratchpad sector of flash memory
    """

    # Sector [0, 31] to work with
    sector: int
    data: list[int]

    def serialize(self) -> bytes: ...

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]: ...

@dataclasses.dataclass
class LogMessage:
    message: str

    def serialize(self) -> bytes: ...

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]: ...

class BaseSerializer(bh_cobs.BhCobs):
    def __init__(self, registry: bh_cobs.Registry | None = None): ...

class BaseNode[Transporter: transporter.TransporterLike](bh.BhNode[BaseSerializer, Transporter]):
    def __init__(self, serializer: BaseSerializer | None = None, transporter: Transporter | None = None): ...

# Pong!
PING: bh.Transaction[Ping, LogMessage] = ...
# Write data to the opposite flash app image
WRITE_FLASH_IMAGE: bh.Transaction[FlashPage, FlashPage] = ...
# Read from anywhere in flash
READ_FLASH: bh.Transaction[FlashPage, FlashPage] = ...
# Write flash sector contents
WRITE_FLASH_SECTOR: bh.Transaction[FlashSector, FlashSector] = ...
# Read flash flash sector contents
READ_FLASH_SECTOR: bh.Transaction[FlashSector, FlashSector] = ...
# Reset the device (needs a type to send/receive; both unused)
RESET: bh.Transaction[Ping, Ping] = ...
