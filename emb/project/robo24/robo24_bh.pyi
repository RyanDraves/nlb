# @generated by Buffham
import dataclasses
from typing import Self

from emb.network.serialize import bh_cobs
from emb.network.transport import transporter
from nlb.buffham import bh

from emb.project.base import base_bh

@dataclasses.dataclass
class DistanceMeasurement:
    # Timestamp relative to device boot, in milliseconds
    timestamp_ms: int
    # Measured distance, in millimeters
    distance_mm: int

    def serialize(self) -> bytes: ...

    @classmethod
    def deserialize(cls, buffer: bytes) -> tuple[Self, int]: ...

class Robo24Serializer(bh_cobs.BhCobs):
    def __init__(self, registry: bh_cobs.Registry | None = None): ...

class Robo24Node[Transporter: transporter.TransporterLike](bh.BhNode[Robo24Serializer, Transporter]):
    def __init__(self, serializer: Robo24Serializer | None = None, transporter: Transporter | None = None): ...

GET_MEASUREMENT: bh.Transaction[base_bh.Ping, DistanceMeasurement] = ...
