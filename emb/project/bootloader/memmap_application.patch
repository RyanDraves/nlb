--- memmap_default.ld   2024-09-28 23:07:23.663160943 -0600
+++ memmap_application.ld       2024-09-28 23:04:18.028307067 -0600
@@ -21,9 +21,18 @@
     __stack (== StackTop)
 */

+/* Defines borrowed from
+   https://github.com/rhulme/pico-flashloader
+ */
+__BOOTLOADER_START = 0;
+__BOOTLOADER_LENGTH = {{ pico_bootloader_size }};
+__APPLICATION_START = __BOOTLOADER_START + __BOOTLOADER_LENGTH;
+__FLASH_OFFSET = __APPLICATION_START;
+
+
 MEMORY
 {
-    INCLUDE "pico_flash_region.ld"
+    FLASH(rx) : ORIGIN = 0x10000000 + __FLASH_OFFSET, LENGTH = DEFINED(__FLASH_LENGTH) ? __FLASH_LENGTH : {{ pico_flash_size }} - __FLASH_OFFSET
     RAM(rwx) : ORIGIN =  0x20000000, LENGTH = 256k
     SCRATCH_X(rwx) : ORIGIN = 0x20040000, LENGTH = 4k
     SCRATCH_Y(rwx) : ORIGIN = 0x20041000, LENGTH = 4k
@@ -33,31 +42,10 @@

 SECTIONS
 {
-    /* Second stage bootloader is prepended to the image. It must be 256 bytes big
-       and checksummed. It is usually built by the boot_stage2 target
-       in the Raspberry Pi Pico SDK
-    */
-
     .flash_begin : {
         __flash_binary_start = .;
     } > FLASH

-    .boot2 : {
-        __boot2_start__ = .;
-        KEEP (*(.boot2))
-        __boot2_end__ = .;
-    } > FLASH
-
-    ASSERT(__boot2_end__ - __boot2_start__ == 256,
-        "ERROR: Pico second stage bootloader must be 256 bytes in size")
-
-    /* The second stage will always enter the image at the start of .text.
-       The debugger will use the ELF entry point, which is the _entry_point
-       symbol if present, otherwise defaults to start of .text.
-       This can be used to transfer control back to the bootrom on debugger
-       launches only, to perform proper flash setup.
-    */
-
     .text : {
         __logical_binary_start = .;
         KEEP (*(.vectors))
