module(
    name = "nlb",
    version = "0.0.0",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.3.0")
bazel_dep(name = "bazel_skylib", version = "1.6.1")
bazel_dep(name = "rules_platform", version = "0.1.0")

#
# Pico SDK & Picotool
#
bazel_dep(name = "pico-sdk", version = "2.0.0")
bazel_dep(name = "rules_cc", version = "0.0.9")
register_toolchains(
    "@pico-sdk//bazel/toolchain:linux-x86_64-rp2040",
    "@pico-sdk//bazel/toolchain:linux-x86_64-rp2350",
    "@pico-sdk//bazel/toolchain:win-x86_64-rp2040",
    "@pico-sdk//bazel/toolchain:win-x86_64-rp2350",
    "@pico-sdk//bazel/toolchain:mac-x86_64-rp2040",
    "@pico-sdk//bazel/toolchain:mac-x86_64-rp2350",
    "@pico-sdk//bazel/toolchain:mac-aarch64-rp2040",
    "@pico-sdk//bazel/toolchain:mac-aarch64-rp2350",
)

# Check https://github.com/raspberrypi/pico-sdk/tree/master/bazel for when this can be removed
archive_override(
    module_name = "rules_cc",
    urls = "https://github.com/bazelbuild/rules_cc/archive/1acf5213b6170f1f0133e273cb85ede0e732048f.zip",
    strip_prefix = "rules_cc-1acf5213b6170f1f0133e273cb85ede0e732048f",
    integrity = "sha256-NddP6xi6LzsIHT8bMSVJ2NtoURbN+l3xpjvmIgB6aSg=",
)

bazel_dep(name = "picotool", version = "2.0.0")

#
# Rules Ruby
#
bazel_dep(name = "rules_ruby", version = "0.6.0")

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "ruby",
    version = "3.0.6",
)
use_repo(ruby, "ruby")
ruby.bundle_fetch(
    name = "bundle",
    gemfile = "//pages:Gemfile",
    gemfile_lock = "//pages:Gemfile.lock",
)
use_repo(ruby, "bundle", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

#
# Rules Python
#
# aspect_rules_py is promising, but its `py_venv` is 3.11+ and
# rule is either underdocumented or broken.
bazel_dep(name = "aspect_rules_py", version = "0.5.0")

bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

python.toolchain(
    python_version = "3.12",
    is_default = True,
)

use_repo(python, "python_versions")
use_repo(python, "python_3_12")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//:requirements_lock.txt",
)

use_repo(pip, "pip")

#
# Buildifier
#
bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "0e990032f3c5a866e72615cf67e5ce22186dcb97",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

#
# rules_foreign_cc
#
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

#
# Pybind11
#
bazel_dep(name = "pybind11_bazel", version = "2.12.0")

#
# ESP32
#
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# TODO: Take another swing at getting gcc working
# http_archive(
#     name = "xtensa_esp_elf_linux-x86_64",
#     build_file = "//bzl/toolchains:xtensa_gcc.BUILD",
#     sha256 = "fcef03d87eac44c0dbee2bbee98443ed2fcf82720dcd8ebfe00640807b0f07c2",
#     strip_prefix = "xtensa-esp-elf",
#     url = "https://github.com/espressif/crosstool-NG/releases/download/esp-13.2.0_20240530/xtensa-esp-elf-13.2.0_20240530-x86_64-linux-gnu.tar.xz",
# )

http_archive(
    name = "esp_clang_linux-x86_64",
    build_file = "//bzl/toolchains:xtensa_clang.BUILD",
    sha256 = "3dbd8dd290913a93e8941da8a451ecd49f9798cc2d74bb9b63ef5cf5c4fee37f",
    strip_prefix = "esp-clang",
    url = "https://github.com/espressif/llvm-project/releases/download/esp-16.0.0-20230516/llvm-esp-16.0.0-20230516-linux-amd64.tar.xz",
)

register_toolchains(
    "//bzl/toolchains:linux-x86_64-esp32s3",
)
