module(
    name = "nlb",
    version = "0.0.0",
)

# "Standard" dependencies
# TODO uncomment me
# bazel_dep(name = "aspect_bazel_lib", version = "2.10.0")
# bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_cc", version = "0.1.0")
bazel_dep(name = "rules_platform", version = "0.1.0")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

#
# Pico SDK & Picotool
#
bazel_dep(name = "pico-sdk", version = "2.1.0")
register_toolchains(
    "@pico-sdk//bazel/toolchain:linux-x86_64-rp2040",
    "@pico-sdk//bazel/toolchain:linux-x86_64-rp2350",
    "@pico-sdk//bazel/toolchain:win-x86_64-rp2040",
    "@pico-sdk//bazel/toolchain:win-x86_64-rp2350",
    "@pico-sdk//bazel/toolchain:mac-x86_64-rp2040",
    "@pico-sdk//bazel/toolchain:mac-x86_64-rp2350",
    "@pico-sdk//bazel/toolchain:mac-aarch64-rp2040",
    "@pico-sdk//bazel/toolchain:mac-aarch64-rp2350",
)

bazel_dep(name = "picotool", version = "2.1.0")

# Pioasm is not yet available in the Pico SDK Bazel build
# https://github.com/raspberrypi/pico-sdk/tree/master/bazel#known-issues-and-limitations
# but the binary is distributed in another repo
http_archive(
    name = "pioasm",
    build_file = "//bzl/deps:pioasm.BUILD",
    integrity = "sha256-MyatUnHnx6syP+QhtjfQi/OOqo2iduhaJXM9kleXuA4=",
    url = "https://github.com/raspberrypi/pico-sdk-tools/releases/download/v2.0.0-5/pico-sdk-tools-2.0.0-x86_64-lin.tar.gz",
)

#
# Rules Ruby
#
bazel_dep(name = "rules_ruby", version = "0.6.0")

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "ruby",
    version = "3.0.6",
)
use_repo(ruby, "ruby")
ruby.bundle_fetch(
    name = "bundle",
    gemfile = "//pages:Gemfile",
    gemfile_lock = "//pages:Gemfile.lock",
)
use_repo(ruby, "bundle", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

#
# Rules Python
#
# aspect_rules_py is promising, but its `py_venv` is 3.11+ and
# rule is either underdocumented or broken.
bazel_dep(name = "aspect_rules_py", version = "1.0.0")

bazel_dep(name = "rules_python", version = "0.40.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

python.toolchain(
    python_version = "3.12",
    is_default = True,
)

use_repo(python, "python_versions")
use_repo(python, "python_3_12")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//:requirements_lock.txt",
)

use_repo(pip, "pip")

#
# py_venv export
#
git_repository(
    name = "rules_pyvenv",
    commit = "0b03b0d1f5562223d1170c511e548dc0961f0c5f",
    remote = "https://github.com/cedarai/rules_pyvenv",
)

#
# Buildifier
#
bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "0e990032f3c5a866e72615cf67e5ce22186dcb97",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

#
# rules_foreign_cc
#
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

#
# Pybind11
#
bazel_dep(name = "pybind11_bazel", version = "2.12.0")

#
# Zmq
#
http_archive(
    name = "cppzmq",
    build_file = "//bzl/deps:cppzmq.BUILD",
    integrity = "sha256-VNXYMV/WEWEkrH7sQRYQriFlLcpwwLyTbbXyzM9K1gs=",
    patch_args = ["-p1"],
    patches = ["//bzl/deps:cppzmq.patch"],
    strip_prefix = "cppzmq-4.10.0",
    url = "https://github.com/zeromq/cppzmq/archive/refs/tags/v4.10.0.zip",
)

http_archive(
    name = "libzmq",
    build_file = "//bzl/deps:libzmq.BUILD",
    integrity = "sha256-SbnWzRInXZSidyT82mRlVPE68nhX4/53i3LLJFx0l24=",
    strip_prefix = "libzmq-4.3.5",
    url = "https://github.com/zeromq/libzmq/archive/refs/tags/v4.3.5.zip",
)

#
# Google Test
#
bazel_dep(name = "googletest", version = "1.15.2")

#
# Web development
#
bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "aspect_rules_lint", version = "1.0.0-rc4")
bazel_dep(name = "aspect_rules_jest", version = "0.22.0")
bazel_dep(name = "aspect_rules_js", version = "2.0.2")
bazel_dep(name = "aspect_rules_swc", version = "2.0.1")
bazel_dep(name = "aspect_rules_ts", version = "3.1.0")
bazel_dep(name = "aspect_rules_rollup", version = "2.0.0")
bazel_dep(name = "aspect_rules_webpack", version = "0.16.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_nodejs", version = "6.2.0")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)

# TODO: use 20.18.0
node.toolchain(node_version = "20.13.1")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    # `pnpm i --lockfile-only` will regenerate this
    pnpm_lock = "//:pnpm-lock.yaml",
    public_hoist_packages = {
        "@next/eslint-plugin-next": ["blog"],
        "eslint-config-react-app": ["react"],
        "eslint@8.28.0": ["react"],
    },
    verify_node_modules_ignored = "//:.bazelignore",
    # TODO add pnpm lock data update thing idk where I hallucinated it
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")
